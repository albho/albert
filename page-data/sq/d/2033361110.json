{"data":{"allMdx":{"nodes":[{"frontmatter":{"path":"/blog/singleton-design-pattern/","date":"November 11, 2022","title":"Singleton Design Pattern","description":"Software Design Patterns - JS/TS, Functional Programming"},"body":"\nThe singleton design pattern is a creational design pattern.\n\n## Demo\n\n<StateSingleton />\n\n```javascript\nclass ApplicationState {\n  constructor() {\n    if (ApplicationState.instance === undefined) {\n      this.state = 'OFF';\n      ApplicationState.instance = this;\n    }\n\n    return ApplicationState.instance;\n  }\n\n  toggleState() {\n    if (this.state === 'ON') {\n      this.state = 'OFF';\n    } else {\n      this.state = 'ON';\n    }\n  }\n\n  getState() {\n    return this.state;\n  }\n}\n```\n\n[Full Code Example (in TS)](https://github.com/albho/albert/tree/main/src/components/demos/state_singleton.tsx)\n"},{"frontmatter":{"path":"/blog/factory-design-pattern/","date":"November 11, 2022","title":"Factory Design Pattern","description":"Software Design Patterns - JS/TS, Functional Programming"},"body":"\nThe factory design pattern is a creational design pattern.\n\n## Demo\n\n<NotificationFactory />\n\n```javascript\nfunction successNotification(message) {\n  this.type = 'SUCCESS';\n  this.message = message;\n}\n\nfunction failureNotification(message) {\n  this.type = 'FAILURE';\n  this.message = message;\n}\n\nfunction defaultNotification(message) {\n  this.type = 'DEFAULT';\n  this.message = message;\n}\n\nfunction addNotification(type, message) {\n  switch (type) {\n    case 'SUCCESS':\n      return new successNotification(message);\n    case 'FAILURE':\n      return new failureNotification(message);\n    default:\n      return new defaultNotification(message);\n  }\n}\n```\n\n[Full Code Example (in TS)](https://github.com/albho/albert/tree/main/src/components/demos/notification_factory.tsx)\n"},{"frontmatter":{"path":"/blog/decorator-design-pattern/","date":"November 12, 2022","title":"Decorator Design Pattern","description":"Software Design Patterns - JS/TS, Functional Programming"},"body":"\nThe decorator design pattern is a structural design pattern.\n\n## Demo\n\n<ShoeDecorator />\n\n```javascript\nabstract class Shoe {\n  public name;\n\n  public getName(): string {\n    return this.name;\n  }\n\n  public features(): string[] {\n    return [''];\n  }\n}\n\nabstract class ShoeFeatures extends Shoe {\n  decoratedShoe;\n  public abstract features();\n}\n\nclass Shoe1 extends Shoe {\n  public name = 'Shoe 1';\n}\n\nclass Shoe2 extends Shoe {\n  public name = 'Shoe 2';\n}\n\nclass WaterproofFeature extends ShoeFeatures {\n  constructor(shoe) {\n    super();\n    this.name = shoe.name;\n    this.decoratedShoe = shoe;\n  }\n\n  public features() {\n    return [...this.decoratedShoe.features(), 'Waterproof'];\n  }\n}\n\nclass GoretexFeature extends ShoeFeatures {\n  constructor(shoe) {\n    super();\n    this.name = shoe.name;\n    this.decoratedShoe = shoe;\n  }\n\n  public features() {\n    return [...this.decoratedShoe.features(), 'Goretex'];\n  }\n}\n```\n\n[Full Code Example (in TS)](https://github.com/albho/albert/tree/main/src/components/demos/shoe_decorator.tsx)\n"}]}}}